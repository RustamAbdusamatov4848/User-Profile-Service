openapi: 3.0.1
info:
  title: User Profile API
  description: User Profile API
  version: "1.0"
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /v1/users:
    get:
      tags:
        - user-controller
      operationId: getAllUsers
      summary: Get all users with pageable
      parameters:
        - name: page
          in: query
          description: The page number to retrieve
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of users per page
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
    put:
      tags:
        - user-controller
      operationId: updateUser
      summary: Update user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
        required: true
      responses:
        "204":
          description: OK
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
    post:
      tags:
        - user-controller
      operationId: createUser
      summary: Create a new User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
  /v1/users/role:
    get:
      tags:
        - user-controller
      operationId: getUsersByRole
      summary: Get all user with specified role
      parameters:
        - name: role
          in: query
          required: true
          description: |
            - SYSTEM_ADMIN:
              Full access, including managing user permissions. Responsible for the technical maintenance of the system.
            - ADMIN:
              Can modify settings, fields, and customer records. Also has manager permissions.
              As administrators, the head of the sales department (HSD) and the school management act.
            - MANAGER:
              Can view and edit customer records but cannot delete them. Handles customer requests.
          schema:
            $ref: "#/components/schemas/Role"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
  /v1/users/{id}/contacts:
    get:
      tags:
        - user-controller
      operationId: getUserContactByUserId
      summary: Get user contacts by user id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserContactDto"
        "404":
          description: Entity search error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
    put:
      tags:
        - user-controller
      operationId: updateUserContactByUserId
      summary: Update user contacts by user id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserContactDto"
        required: true
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserContactDto"
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
  /v1/users/{id}:
    get:
      tags:
        - user-controller
      operationId: getUserById
      summary: Get user by user id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "404":
          description: Entity search error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
    delete:
      tags:
        - user-controller
      operationId: deleteUserById
      summary: Delete user by user id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: OK
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
  /v1/users/contacts/{id}:
    get:
      tags:
        - user-controller
      operationId: getUserContactByContactId
      summary: Get user contacts by user contact id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserContactDto"
        "404":
          description: Entity search error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
components:
  schemas:
    UserDto:
      required:
        - email
        - userRole
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          maxLength: 50
          minLength: 0
          type: string
        lastName:
          maxLength: 50
          minLength: 0
          type: string
        email:
          type: string
          description: "Email address of the user. Must be unique."
        userContactId:
          type: integer
          format: int64
        userRole:
          $ref: "#/components/schemas/Role"
    UserContactDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        telegramId:
          pattern: "^@[a-zA-Z0-9_]{4,}$"
          type: string
        mobilePhone:
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
    ValidationErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "must be a valid email address"
      required:
        - status
        - message
        - errors
    Role:
      type: string
      enum:
        - SYSTEM_ADMIN
        - ADMIN
        - MANAGER
